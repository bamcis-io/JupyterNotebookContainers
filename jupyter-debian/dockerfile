FROM bamcis/ca-debian:latest

MAINTAINER Michael Haken <michael.haken@outlook.com>

SHELL ["/bin/bash", "-c"]

ARG JUPYTER_PATH="/opt/jupyter"
ARG JUPYTER_CONFIG_DIR="/opt/jupyter/etc"
ARG VERSION="5.5"
ARG OPEN_CV_VERSION="3.4.1"

ENV DEBIAN_FRONTEND="noninteractive" \
	CONDA_DIR=/opt/conda \
	PATH=/opt/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \
	MINICONDA_VERSION=4.5.1 \
	JUPYTER_PATH="${JUPYTER_PATH}" \
	JUPYTER_CONFIG_DIR="${JUPYTER_CONFIG_DIR}" \
	ROLE="notebook" \
	CC=/usr/bin/gcc \
	CXX=/usr/bin/g++

RUN apt-get update \
	&& apt-get -y upgrade \
	&& apt-get -y dist-upgrade \
	&& apt-get -y autoremove \
	&& apt-get remove --assume-yes ^openjdk \
	&& apt-get remove --assume-yes ^java \

	#
	# Add OS components
	#
	&& apt-get install --assume-yes \
		bash \
		openssl \
		wget \


	#
	# Libraries OpenCV will use
	#
	&& apt-get install --assume-yes \
		
		# Required
		libgtk2.0-dev \
		libavcodec-dev \ 
		libavformat-dev \
		libswscale-dev \
		libavresample-dev \

		# Images
		libjpeg-dev \
		libwebp-dev \
		libpng-dev \
		libtiff5-dev \
		libopenjp2-7-dev \
		libopenexr-dev \
		libdc1394-22-dev \
		libgdal-dev \
		libgphoto2-dev \

		# Video I/O
		libtheora-dev \
		libvorbis-dev \
		libxvidcore-dev \
		libx264-dev \
		libopencore-amrnb-dev \
		libopencore-amrwb-dev \
		libv4l-dev \
		libgstreamer1.0-dev \
		libgstreamer-plugins-base1.0-dev \

		# Optimization
		libtbb2 \
		libtbb-dev \
		libatlas-base-dev \
		gfortran \
		libeigen3-dev \


	#
	# Libraries to build OpenCV
	#
	&& apt-get install --assume-yes \		
		build-essential \
	    make \
		cmake \
		git  \
		pkg-config  \


	#
	# Libraries for Python
	#
	&& apt-get install --assume-yes \
		#
		# For numpy
		#
		libopenblas-dev \
		gfortran \
		#
		# For matplotlib
		#
		libfreetype6-dev \
		openssl \


	#
	# Setup Python/Jupyter
	#
	&& mkdir -p $JUPYTER_PATH \
	&& mkdir -p $JUPYTER_CONFIG_DIR \
	&& echo "export JUPYTER_PATH=${JUPYTER_PATH}" > /etc/profile.d/jupyter.sh \
	&& echo "export JUPYTER_CONFIG_DIR=${JUPYTER_CONFIG_DIR}" >> /etc/profile.d/jupyter.sh \
	
	
	#
	# Download and install miniconda3
	#
	&& wget --quiet --directory-prefix "/tmp/" "https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh" \
	&& /bin/bash "/tmp/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh" -f -b -p $CONDA_DIR \
	&& rm "/tmp/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh" \
	&& $CONDA_DIR/bin/conda config --system --prepend channels conda-forge \
    && $CONDA_DIR/bin/conda config --system --set auto_update_conda false \
    && $CONDA_DIR/bin/conda config --system --set show_channel_urls true \
    && $CONDA_DIR/bin/conda update --all --quiet --yes \
    && conda clean -tipsy \
    && rm -rf /root/.cache/yarn \
	&& echo "export CONDA_DIR=${CONDA_DIR}" > /etc/profile.d/conda.sh \
	
	
	#
	# Install jupyter notebook and other python
	# packages
	#
	&& conda install --quiet --yes \
	"notebook=${VERSION}.*" \
	'jupyterhub=0.8.*' \
    'jupyterlab=0.32.*' \
	'scipy' \
	'numpy' \
	'matplotlib' \
	&& conda clean -tipsy \
    && jupyter labextension install @jupyterlab/hub-extension \
	&& pip install --upgrade pip \
    && npm cache clean --force \
    && rm -rf $CONDA_DIR/share/jupyter/lab/staging \
    && rm -rf /root/.cache/yarn \

	#
	# Setup the JupyterHub config
	#
	&& mkdir -p /etc/jupyterhub \
	&& jupyterhub --generate-config -f /etc/jupyterhub/jupyterhub_config.py \


	#
	# Add admin user to JupyterHub
	#
	&& echo "c.Authenticator.admin_users = {'jupyter'}" >> /etc/jupyterhub/jupyterhub_config.py \
	
	
	#
	# Create local users automatically when a hub admin creates them
	#
	&& echo "c.LocalAuthenticator.create_system_users = True" >> /etc/jupyterhub/jupyterhub_config.py \
	

	#
	# Add OpenCV
	#
	# -O- output payload to stdout, and use -q to supress all wget
	# output, so only tar file is sent down the pipeline
	#
    && mkdir -p /tmp/opencv \ 
	&& wget -qO- https://github.com/opencv/opencv/archive/${OPEN_CV_VERSION}.tar.gz \
	#
	# -f - specifies that the archive location is from the pipeline
	#
	| tar -zxv -f - --directory /tmp/opencv --strip 1 \
	&& mkdir -p /tmp/opencv/build \
    && cd /tmp/opencv/build \
	&& echo "Building opencv..." \
	&& cmake \
		-D CMAKE_BUILD_TYPE=RELEASE \
		-D CMAKE_INSTALL_PREFIX="/usr/local" \
		-D INSTALL_C_EXAMPLES=OFF \
		-D INSTALL_PYTHON_EXAMPLES=OFF \
		-D PYTHON3_EXECUTABLE="$(which python3)" \
		-D WITH_TBB=ON \
		-D WITH_LIBV4L=ON \
		-D BUILD_DOCS=OFF \
		-D BUILD_EXAMPLES=OFF \
		-D BUILD_PERF_TESTS=OFF \
		-D BUILD_TESTS=OFF \
		.. \
	&& make -j4 \
	&& make install \
	&& ldconfig \
	&& cd / \
	&& rm -rf /tmp/opencv \
	&& for FILE in $(find /usr/local/lib -type f -name "cv2*.so"); do \
	PY=$(echo $FILE | grep -o -e "python[0-9]\{1,\}\.[0-9]\{1,\}") \
	&& ln -s $FILE "${CONDA_DIR}/lib/${PY}/site-packages/"; \
	done \
	&& echo "OPENCV VERSION: " $(python3 -c "import cv2; print(cv2.__version__)") \
	&& echo "Successfully installed opencv" \

	
	#
	# Peform cert setup
	#
	# The Server certificate request
	#
	&& mkdir -p ${JUPYTER_PATH}/ssl \
	&& touch  ${JUPYTER_PATH}/ssl/server.req \
	&& echo [ req ] >>  ${JUPYTER_PATH}/ssl/server.req \
	&& echo prompt				= no >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo default_bits		= 2048 >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo distinguished_name	= req_distinguished_name >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo req_extensions		= req_ext >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo default_md			= sha_256 >> ${JUPYTER_PATH}/ssl/server.req \
	
	
	#
	# Extension to add when the -x509 option is used.
	#
	&& echo x509_extensions     = server_cert >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo [ req_distinguished_name ] >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo O					= bamcis.io >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo OU					= bamcis-jupyter-notebook >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo CN					= ${HOSTNAME} >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo [ server_cert ] >> ${JUPYTER_PATH}/ssl/server.req \
	
	
	#
	# Extensions for server certificates (man x509v3_config).
	#
	&& echo basicConstraints	= CA:FALSE >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo nsCertType			= server >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo nsComment			= \"OpenSSL Generated Server Certificate\" >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo subjectKeyIdentifier = hash >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo authorityKeyIdentifier = keyid,issuer:always >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo keyUsage = critical, digitalSignature, keyEncipherment >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo extendedKeyUsage	= serverAuth >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo [ req_ext ] >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo subjectAltName		= @alt_names >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo [ alt_names ] >> ${JUPYTER_PATH}/ssl/server.req \
	&& echo DNS.1 = ${HOSTNAME} >> ${JUPYTER_PATH}/ssl/server.req \
	
	
	#
	# Creates a new certificate request and private key that is not password protected (-nodes)
	#
	&& openssl req -newkey rsa:2048 -days 3650 -nodes -config ${JUPYTER_PATH}/ssl/server.req \
		-keyout ${JUPYTER_PATH}/ssl/server-key.pem -out ${JUPYTER_PATH}/ssl/server-req.pem \	
	
	
	#
	# Process the server key, the key was originally written in PKCS#8 Private-Key Information Syntax Standard
	# and converts it to a PKCS#1 format, an RSA PRIVATE KEY
	#
	&& openssl rsa -in ${JUPYTER_PATH}/ssl/server-key.pem -out ${JUPYTER_PATH}/ssl/server-key.pem \
	&& chmod 0400 ${JUPYTER_PATH}/ssl/server-key.pem \
	
	
	#
	# Make sure all environment variables are loaded since they
	# contain CA_CERT and CA_KEY and CA_PRIVATE_KEY_PASSWORD
	#
	&& source /root/.bashrc \
	&& export PATH=$PATH \
	
	
	#
	# Sign the server certificate
	#
	&& openssl x509 -req -in ${JUPYTER_PATH}/ssl/server-req.pem -days 3650 -extfile ${JUPYTER_PATH}/ssl/server.req \
		-extensions server_cert -CA "${CA_CERT}" -CAkey "${CA_KEY}" \
		-passin "pass:${CA_PRIVATE_KEY_PASSWORD}" -set_serial 01 -out ${JUPYTER_PATH}/ssl/server-cert.pem \
	&& chmod 0444 ${JUPYTER_PATH}/ssl/server-cert.pem \


	#
	# Make sure path includes everything for new users
	#
	&& echo "PATH=${PATH}" >> /etc/profile \


	#
	# Add the group and user for running the jupyter services
	#
	&& addgroup --system jupyter \


	#
	# Use -gecos "" to bypass prompts
	#
	&& adduser --system --ingroup jupyter --home /home/jupyter --shell /bin/bash --disabled-password --gecos "" jupyter \
	&& mkdir -p "/home/jupyter/notebooks" \
	&& chown --recursive jupyter "/home/jupyter" \


	#
	# Make sure jupyter user owns the jupyter paths
	#
	&& chown --recursive jupyter:jupyter ${JUPYTER_PATH} \
	&& chown --recursive jupyter:jupyter ${JUPYTER_CONFIG_DIR} \	


	#
	# Delete the config file
	#
	&& rm -f ${JUPYTER_PATH}/ssl/server.req \


	#
	# Delete the signing request
	#
	&& rm -f ${JUPYTER_PATH}/ssl/server-req.pem \
	

	#
	# Cleanup
	#
	&& apt-get remove --assume-yes wget make cmake git build-essential \
	&& apt-get autoclean -y \
	&& apt-get autoremove -y \
	&& apt-get clean -y \
	&& rm -rf /var/lib/apt/lists/*

COPY entrypoint.sh /tmp/entrypoint.sh

EXPOSE 8888 8081

ENTRYPOINT ["/tmp/entrypoint.sh"]